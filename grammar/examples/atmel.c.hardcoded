bool lddyplus (VMState * state, VMStateDiff *diff, OPCODE_TYPE opcode) {

	// error
	bool error = false;

	// result
	int result = 0;

	//Arguments 
	
	// Decode the opcode
	int d = 0; AddBit(&d,opcode,8); AddBit(&d,opcode,7); AddBit(&d,opcode,6); AddBit(&d,opcode,5); AddBit(&d,opcode,4); 
	int q = 0; AddBit(&q,opcode,13); AddBit(&q,opcode,11); AddBit(&q,opcode,10); AddBit(&q,opcode,2); AddBit(&q,opcode,1); AddBit(&q,opcode,0); 


	// Execute expressions
	//Rd = RAM(Y+q);
	result = vm_info(state,VM_INFO_REGISTER,Y+q,&error);
	if(!vm_write(state, diff, VM_INFO_REGISTER, d, result))
		return false;
	
	// PC = PC + 1 
	// Calculate expressions for the result var
	result =  vm_info(state,VM_INFO_REGISTER,PC,&error) + 1 ;
	// Check if there was an error in the calculation of the result
	if (error)
		return false;

	if(!vm_write(state, diff, VM_INFO_REGISTER, PC, result))
		return false;



	//Update instruction pointer
	state->pc = vm_info(state,VM_INFO_REGISTER,PC,&error);

	return error;
}
////////
////////
bool stxplus (VMState * state, VMStateDiff *diff, OPCODE_TYPE opcode) {

	// error
	bool error = false;

	// result
	int result = 0;

	//Arguments X,Rr

	// Decode the opcode
	int r = 0; AddBit(&r,opcode,8); AddBit(&r,opcode,7); AddBit(&r,opcode,6); AddBit(&r,opcode,5); AddBit(&r,opcode,4); 


	// Execute expressions
	
	//RAM(X) = Rr;
	result = vm_info(state,VM_INFO_REGISTER,r,&error);
	if(!vm_write(state, diff, VM_INFO_RAM, X, result))
		return false;

	// X = X + 1 
	// Calculate expressions for the result var
	result =  vm_info(state,VM_INFO_REGISTER,X,&error) + 1 ;
	// Check if there was an error in the calculation of the result
	if (error)
		return false;

	if(!vm_write(state, diff, VM_INFO_REGISTER, X, result))
		return false;


	// PC = PC + 1 
	// Calculate expressions for the result var
	result =  vm_info(state,VM_INFO_REGISTER,PC,&error) + 1 ;
	// Check if there was an error in the calculation of the result
	if (error)
		return false;

	if(!vm_write(state, diff, VM_INFO_REGISTER, PC, result))
		return false;



	//Update instruction pointer
	state->pc = vm_info(state,VM_INFO_REGISTER,PC,&error);

	return error;
}
bool stdyplus (VMState * state, VMStateDiff *diff, OPCODE_TYPE opcode) {

	// error
	bool error = false;

	// result
	int result = 0;

	//Arguments Y,Rr

	// Decode the opcode
	int r = 0; AddBit(&r,opcode,8); AddBit(&r,opcode,7); AddBit(&r,opcode,6); AddBit(&r,opcode,5); AddBit(&r,opcode,4); 


	// Execute expressions
	
	//RAM(Y) = Rr;
	result = vm_info(state,VM_INFO_REGISTER,r,&error);
	if(!vm_write(state, diff, VM_INFO_RAM, Y, result))
		return false;

	// Y = Y + 1 
	// Calculate expressions for the result var
	result =  vm_info(state,VM_INFO_REGISTER,Y,&error) + 1 ;
	// Check if there was an error in the calculation of the result
	if (error)
		return false;

	if(!vm_write(state, diff, VM_INFO_REGISTER, Y, result))
		return false;


	// PC = PC + 1 
	// Calculate expressions for the result var
	result =  vm_info(state,VM_INFO_REGISTER,PC,&error) + 1 ;
	// Check if there was an error in the calculation of the result
	if (error)
		return false;

	if(!vm_write(state, diff, VM_INFO_REGISTER, PC, result))
		return false;



	//Update instruction pointer
	state->pc = vm_info(state,VM_INFO_REGISTER,PC,&error);

	return error;
}

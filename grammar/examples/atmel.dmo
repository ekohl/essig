atmel {
	parameters {
		gprs 32;
		ram 16777216;

		/* Standard Values */
		clock 1; /* 1 clock_cycle */
	}

	registers {
		/* -- Status Register (SREG) -- */
		SREG; /* Status register */
		C; /* Carry flag */
		Z; /* Zero flag */
		N; /* Negative flag */
		V; /* Two's complement overflow indicator */
		S; /* N^V, For signed tests */
		H; /* Half Carry Flag */
		T; /* Transfer bit used by BLD and BST instructions */

		/* -- Rest -- */
		I; /* Global Interrupt Enable/Disable Flag */
		PC; /* Program counter */
		SP; /* Stack Pointer */
	}

	instructions {

		
		noop "0000 0000 0000 0000" {
			PC = PC + 1;
		}
	
		/* Add with Carry */
		adc "0001 11rd dddd rrrr" Rd, Rr {
			Rd = Rd + Rr + C;

			H = Rd3 & Rr3 + Rr3 & !R3 + !R3 & Rd3;
			S = N ^ V;
			V = Rd7 & Rr7 &  !R7 + !Rd7 & !Rr7 & R7;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
			C = Rd7 & Rr7 + Rr7 & !R7 + !R7 & Rd7;

			PC = PC + 1;

		}

		/* Add without Carry */
		add "0000 11rd dddd rrrr" Rd, Rr {
			Rd = Rd + Rr;

			H = Rd3 & Rr3 + Rr3 & !R3 + !R3 & Rd3;
			S = N ^ V;
			V = Rd7 & Rr7 &  !R7 + !Rd7 & !Rr7 & R7;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
			C = Rd7 & Rr7 + Rr7 & !R7 + !R7 & Rd7;

			PC = PC + 1;
		}

		/* Add Immediate to Word  TODO: solve: ADIW Rd+1:Rd,K*/
		adiw "1001 0110 KKdd KKKK" Rd, K {
			// Rd+1:Rd ? Rd+1:Rd + K; TODO
			R30 = R(30) + $K;
			// d = {24,26,28,30}
			$d = 24 + $d * 2;
			S = N ^ V;
			PC = PC + 1;
			V = !Rd7(h) & R15;
			N = R15;
			Z = !R15 & !R14 & !R13 & !R12 & !R11 & !R10 & !R9 & !R8 & !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
			C = !R15 & Rd7(h);
		}

		/* Logical AND */
		and "0010 00rd dddd rrrr" Rd, Rr {
			/* 0 <= d <= 31, 0 <= r 31 */
			Rd = Rd & Rr;
			PC = PC + 1;
			S = N ^ V;
			V = 0;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
		}

  		/* Logical AND with Immediate */
                andi "0111 KKKK dddd KKKK" Rd, K {
                        /* 16 <= d <= 31, 0 <= K <= 255 */
                        Rd = Rd & $K;
                        PC = PC + 1;
                        S = N ^ V;
                        V = 0;
                        N = R7;
                        Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
                }
		/* Branch if Equal */
		breq "1111 00kk kkkk k001" ~k {
			if Z == 1 {
				PC = PC + $k + 1;
			} else {
				PC = PC + 1;
			}
		}

		/* Branch if Greater or Equal (Signed) */
		brge "1111 01kk kkkk k100" ~k {
			if (N ^ V) == 0 {
				PC = PC + $k + 1;
			} else {
				PC = PC + 1;
			}
		}

		/* Branch if Not Equal */
		brne "1111 01kk kkkk k001" ~k {
			if Z == 0 {
				PC = PC + $k + 1;
			} else {
				PC = PC + 1;
			}
		}

		/* Clear Global Interrupt Flag */
		cli "1001 0100 1111 1000" {
			I = 0;
			PC = PC + 1;
		}

		/* Compare */
		cp "0001 01rd dddd rrrr" Rd, Rr {
			R = Rd - Rr;
			H = !Rd3 & Rr3 + Rr3 &R3 +R3 & !Rd3;
			S = N ^ V;
			V = Rd7 & !Rr7 & !R7 + !Rd7 & Rr7 & R7;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0 & Z;
			C = !Rd7 & Rr7 + Rr7 & R7 + R7 & !Rd7;
			PC = PC + 1;
		}

		/* Compare with Carry */
		cpc "0000 01rd dddd rrrr" Rd, Rr {
			R = Rd - Rr - C;
			H = !Rd3 & Rr3+ Rr3 &R3 +R3 &!Rd3;
			S = N ^ V;
			V = Rd7 & !Rr7 & !R7 + !Rd7 & Rr7 & R7;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0 & Z;
			C = !Rd7 & Rr7 + Rr7 & R7 + R7 & !Rd7;
			PC = PC + 1;
		}

		/* Compare with Immediate */
		cpi "0011 KKKK dddd KKKK" Rd, K {
			R = Rd - $K;
			H = !Rd3 & !$K3 + $K3 & R3 + R3 & Rd3;
			S = N ^ V;
			V = Rd7 & !$K7 & !R7 + !Rd7 & $K7 & R7;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
			C = !Rd7 & $K7 + $K7 & R7 + R7 & !Rd7;
			PC = PC + 1;
		}

		/* Compare with Immediate */
		com "1001 010d dddd 0000" Rd, K {
			Rd = 255 - Rd;
			
			S = N ^ V;
			V = 0;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
			C = 1;
			PC = PC + 1;
		}

		/* Decrement */
		dec "1001 010d dddd 1010" Rd {
			Rd = Rd - 1;
			S = N^V;
			V = !R7 & R6 & R5 & R4 & R3 & R2 & R1 & R0;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
		}

		/* Exclusive Or */
		eor "0010 01rd dddd rrrr" Rd, Rr {
			Rd = Rd ^ Rr;
			S = N ^ V;
			V = 0;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
			PC = PC + 1;
		}

		/* Indirect Jump */
		ijmp "1001 0100 0000 1001" {
			PC = R(30); //TODO should be RZ
		}

		/* Load an I/O Location to Register */
		in "1011 0AAd dddd AAAA" Rd, A {
			A = Rd;
			PC = PC + 1;
		}

		/* Jump */
		jmp "1001 010r rrrr 110r", "kkkk kkkk kkkk kkkk" ~k, r {
			PC = PC + k;
		}

		/* Load Immediate */
		ldi "1110 KKKK dddd KKKK" Rd, K {
			Rd = $K;
			PC = PC + 1;
		}

		/* Load Indirect from Data Space to Register using Index Y+ */
		lddyplus "10q0 qq0d dddd 1qqq" Rd, q {
			//Rd = RAM(RY+q); TODO
			PC = PC + 1;
		}

		/* Load Indirect from Data Space to Register using Index -Z */
		lddzmin "1001 000d dddd 0010" Rd {
			//Z = Z - 1;
			//Rd = RAM(RZ); TODO
			PC = PC + 1;
		}

		/* Load Indirect from Data Space to Register using Index Z+ */
		lddzplus "1001 000d dddd 0001" Rd {
			//Rd = RAM(RZ); TODO
			//Z = Z + 1;
			PC = PC + 1;
		}

		/* Load Indirect from Data Space to Register using Index Z+q */
		lddzq "10q0 qq0d dddd 0qqq" Rd, q {
			//Rd = RAM(RZ+q); TODO
			PC = PC + 1;
		}

		/* Load Direct from Data Space */
		lds "1001 000d dddd 0000","kkkk kkkk kkkk kkkk" Rd, k{
			//Rd = ram(k); //TODO
			PC = PC + 2;
		}

		/* Logical Shift Right */
		lsr "1001 010d dddd 0110" Rd {
			//TODO			
			S = N ^ V;
			V = N ^ C;
			N = 0;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
			C = Rd0;
			PC = PC + 1;
		}

		/* Load Program Memory */
		lpm "1001 0101 1100 1000" {
			// TODO
			//R0 = R30;
			PC = PC + 1;
		}

		/* Copy Register */
		mov "0010 11rd dddd rrrr" Rd, Rr {
			Rd = Rr;
			PC = PC + 1;
		}

		movw "0000 0001 dddd rrrr" Rd, Rr { 
			$r = $r * 2;
			$d = $d * 2;
			Rd = Rr;
			// TODO 2 registers! not 1.
			PC = PC + 1;
		}

		/* Store Register to I/O Location */
		out "1011 1AAr rrrr AAAA" A, Rr {
			A = Rr;
			PC = PC + 1;
		}

		/* Push Register on Stack */
		push "1001 001r rrrr 1111" Rr {
			// FIXME check if its correct
			ram(SP) = Rr; 
			PC = PC + 1;
			SP = SP - 1;
		}

		/* Pop Register from Stack */
		pop "1001 000d dddd 1111" Rd {
			// FIXME check if its correct
			SP = SP + 1;			
			Rd = ram(SP);
			PC = PC + 1;
			
		}

		/* Return from Subroutine */
		ret "1001 0101 0000 1000" {
			/* TODO zie datasheet */
			PC = PC + 1;
		}

		/* Relative Call to Subroutine */
		rcall "1101 kkkk kkkk kkkk" ~k {
			/* TODO, this is about a 'WORD' and not a single byte */
			PC = PC + $k + 1;
		}

		/* Relative Jump */
		rjmp "1100 kkkk kkkk kkkk" ~k {
			if $k == -1 { HALT; }
			else { PC = PC + $k + 1; }
			
		}

		/* Rotate Right through Carry */
		ror "1001 010d dddd 0111" Rd {
			/* TODO: zie datasheet */
			C = Rd0;
		}

		/* Subtract Immediate from Word */
		sbiw "1001 0111 KKdd KKKK" Rd, K {
			/* Rd+1:Rd ? Rd+1:Rd - K; */
			/* TODO same as adiw */
			
			S = N ^ V;
			PC = PC + 1;
			V = Rd7(h) & !R15;
			N = R15;
			Z = !R15 & !R14 & !R13 & !R12 & !R11 & !R10 & !R9 & !R8 & !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
			C = R15 & !Rd7(h);
			/* R (Result) equals Rdh:Rdl after the operation (Rdh7-Rdh0 = R15-R8, Rdl7-Rdl0=R7-R0). */
		}

		/* Skip if Bit in Register is Set */
		sbrs "1111 111r rrrr 0bbb" Rr, b {
			/* If Rr(b) = 1 then PC ? PC + 2 (or 3) else PC ? PC + 1 */
			if Rr(b) == 1 {
				PC = PC + 2;
			} else {
				PC = PC + 1;
			}
		}

		/* Store Indirect From Register to Data Space using Index X+ */
		stxplus "1001 001r rrrr 1101" X, Rr {
			// X,Y,Z: Indirect Address Register (X=R27:R26, Y=R29:R28 and Z=R31:R30)
			// TODO Store Rr to Dataspace[X]
			ram(R(26)) = Rr; //TODO this are not just single bytes, but TWO registers
			//RX = RX + 1; TODO
			PC = PC + 1;
		}


		/* Store Indirect From Register to Data Space using Index X+ */
		stdyplus "1000 001r rrrr 1000" Rr {
			// X,Y,Z: Indirect Address Register (X=R27:R26, Y=R29:R28 and Z=R31:R30)
			// TODO Store Rr to Dataspace[RY]
			ram(R(28)) = Rr; //TODO this are not just single bytes, but TWO registers
			//RY = RY + 1; TODO
			PC = PC + 1;
		}

		stdyplusq "10q0 qq1r rrrr 1qqq" Rr,q {
			// X,Y,Z: Indirect Address Register (X=R27:R26, Y=R29:R28 and Z=R31:R30)
			// TODO Store Rr to Dataspace[RY]
			ram(R(28) + q) = Rr; //TODO this are not just single bytes, but TWO registers
			PC = PC + 1;
		}

		/* Store Indirect From Register to Data Space using Index X+ */
		stdzplus "10q0 qq1r rrrr 0qqq" q, Rr {
			// X,Y,Z: Indirect Address Register (X=R27:R26, Y=R29:R28 and Z=R31:R30)
			// TODO Store Rr to Dataspace[RZ]
			ram(R(30) + q) = Rr; //TODO this are not just single bytes, but TWO registers
			PC = PC + 1;
		}

		sbc "0000 10rd dddd rrrr" Rd, Rr {
			Rd = Rd - Rr - C;
			H = !Rd3 & Rr3 + Rr3 & R3 + R3 & Rd3;
			S = N ^ V;
			V = Rd7 & !Rr7 & !R7 + !Rd7 & Rr7 & R7;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0 & Z;
			C = !Rd7 & Rr7 + Rr7 & R7 + R7 & !Rd7;			
		}
		
		sub "001 10rd dddd rrrr" Rd, Rr {
			Rd = Rd - Rr;
			H = !Rd3 & Rr3 + Rr3 & R3 + R3 & Rd3;
			S = N ^ V;
			V = Rd7 & !Rr7 & !R7 + !Rd7 & Rr7 & R7;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
			C = !Rd7 & Rr7 + Rr7 & R7 + R7 & !Rd7;	
		}

		subi "0101 KKKK dddd KKKK" Rd, K {
			Rd = Rd - $K;

			H = !Rd3 & $K3 + $K3 & R3 + R3 & Rd3;
			S = N ^ V;
			V = Rd7 & !$K7 & R7 + Rd7 & $K7 & R7;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
			C = !Rd7 & $K7 + $K7 & R7 + R7 & !Rd7;
		}

		sbci "0100 KKKK dddd KKKK" Rd, K {
			Rd = Rd - $K - C;

			H = !Rd3 & $K3 + $K3 & R3 + R3 & Rd3;
			S = N ^ V;
			V = Rd7 & !$K7 & R7 + Rd7 & $K7 & R7;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0 & Z;
			C = !Rd7 & $K7 + $K7 & R7 + R7 & !Rd7;
		}

		sbrc "1111 110r rrrr 0bbb" Rr, b {
			if Rr(b) == 0 {
				PC = PC + 2;
			} else {
				PC = PC + 1;
			}
		}

	}
}

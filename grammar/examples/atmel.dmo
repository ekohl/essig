atmel {
	parameters {
		gprs 32;
		ram 1024;

		/* Standard Values */
		clock 1; /* 1 clock_cycle */
		size 1; /* 1 word */

	}

	registers {
		/* -- Status Register (SREG) -- */
		SREG; /* Status register */
		C; /* Carry flag */
		Z; /* Zero flag */
		N; /* Negative flag */
		V; /* Two's complement overflow indicator */
		S; /* N^V, For signed tests */
		H; /* Half Carry Flag */
		T; /* Transfer bit used by BLD and BST instructions */
		I; /* Global Interrupt Enable/Disable Flag */

		/* -- Rest -- */
		PC; /* Program counter */
		SP; /* Stack Pointer */
	}

	instructions {

		/* Add with Carry */
		adc opcode="0001 11rd dddd rrrr" [clock=1, size=1] Rd, Rr {
			Rd = Rd + Rr + C;

			H = Rd(3) & Rr(3) + Rr(3) & !R3 + !R3 & Rd(3);
			S = N ^ V;
			V = Rd(7) & Rr(7) &  !R7 + !Rd(7) & !Rr(7) & R7;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
			C = Rd(7) & Rr(7) + Rr(7) & !R7 + !R7 & Rd(7);

			PC = PC + 1;

		}

		/* Add without Carry */
		add opcode="0000 11rd dddd rrrr" Rd, Rr {
			Rd = Rd + Rr;

			H = Rd(3) & Rr(3) + Rr(3) & !R3 + !R3 & Rd(3);
			S = N ^ V;
			V = Rd(7) & Rr(7) &  !R7 + !Rd(7) & !Rr(7) & R7;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
			C = Rd(7) & Rr(7) + Rr(7) & !R7 + !R7 & Rd(7);

			PC = PC + 1;
		}

		/* Add Immediate to Word  TODO: solve: ADIW Rd+1:Rd,K*/
		adiw opcode="1001 0110 KKdd KKKK" Rd, K {
			/* Rd+1:Rd ? Rd+1:Rd + K; */
			S = N ^ V;
			PC = PC + 1;
			V = !Rd(h)(7) & R15;
			N = R15;
			Z = !R15 & !R14 & !R13 & !R12 & !R11 & !R10 & !R9 & !R8 & !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
			C = !R15 & Rd(h)(7);
		}

		/* Logical AND */
		and opcode="0010 00rd dddd rrrr" Rd, Rr {
			/* 0 <= d <= 31, 0 <= r 31 */
			Rd = Rd & Rr;
			PC = PC + 1;
			S = N ^ V;
			V = 0;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
		}

		/* Branch if Equal */
		breq opcode="1111 00kk kkkk k001" k {
			if Z == 1 {
				PC = PC + k + 1;
			} else {
				PC = PC + 1;
			}
		}

		/* Branch if Greater or Equal (Signed) */
		brge opcode="1111 01kk kkk k100" k {
			if (N ^ V) == 0 {
				PC = PC + k + 1;
			} else {
				PC = PC + 1;
			}
		}

		/* Branch if Not Equal */
		brne opcode="1111 00kk kkk k001" k {
			if Z == 0 {
				PC = PC + k + 1;
			} else {
				PC = PC + 1;
			}
		}

		/* Clear Global Interrupt Flag */
		cli opcode="1001 0100 1111 1000" {
			I = 0;
			PC = PC + 1;
		}

		/* Compare */
		cp opcode="0001 01rd dddd rrrr" Rd, Rr {
			H = !Rd(3) & Rr(3) + Rr(3) &R3 +R3 & !Rd(3);
			S = N ^ V;
			V = Rd(7) & !Rr(7) & !R7 + !Rd(7) & Rr(7) & R7;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0 & Z;
			C = !Rd(7) & Rr(7) + Rr(7) & R7 + R7 & !Rd(7);
			PC = PC + 1;
		}

		/* Compare with Carry */
		cpc opcode="0000 01rd dddd rrrr" Rd, Rr {
			H = !Rd(3) & Rr(3)+ Rr(3) &R3 +R3 &!Rd(3);
			S = N ^ V;
			V = Rd(7) & !Rr(7) & !R7 + !Rd(7) & Rr(7) & R7;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0 & Z;
			C = !Rd(7) & Rr(7) + Rr(7) & R7 + R7 & !Rd(7);
			PC = PC + 1;
		}

		/* Compare with Immediate */
		cpi opcode="0011 KKKK dddd KKKK" Rd, K {
			H = !Rd(3) & K(3) + K(3) & R3 + R3 & Rd(3);
			S = N ^ V;
			V = Rd(7) & !K(7) & !R7 + !Rd(7) & K(7) & R7;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
			C = !Rd(7) & K(7) + K(7) & R7 + R7 & !Rd(7);
			PC = PC + 1;
		}

		/* Exclusive Or */
		eor opcode="0010 01rd dddd rrrr" Rd, Rr {
			Rd = Rd ^ Rr;
			S = N ^ V;
			V = 0;
			N = R7;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
			PC = PC + 1;
		}

		/* Load an I/O Location to Register */
		in opcode="1011 0AAd dddd AAAA" Rd, A {
			A = Rd;
			PC = PC + 1;
		}

		/* Load Immediate */
		ldi opcode="1110 KKKK dddd KKKK" Rd, K {
			Rd = K;
			PC = PC + 1;
		}

		/* Load Indirect from Data Space to Register using Index Y+ */
		lddyplus opcode="10q0 qq0d dddd 1qqq" {
			//Rd = RAM(RY+q);			
			PC = PC + 1;
		}

		/* Logical Shift Right */
		lsr opcode="1001 010d dddd 0110" Rd {
			S = N ^ V;
			V = N ^ C;
			N = 0;
			Z = !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
			C = Rd(0);
			PC = PC + 1;
		}

		/* Load Program Memory */
		/* TODO: complex
		lpm opcode="1001 0101 1100 1000" {
			PC = PC + 1;
		}

		/* Copy Register */
		mov opcode="0010 11rd dddd rrrr" Rd, Rr {
			Rd = Rr;
			PC = PC + 1;
		}

		/* Store Register to I/O Location */
		out opcode="1011 1AAr rrrr AAAA" A, Rr {
			A = Rr;
			PC = PC + 1;
		}

		/* Push Register on Stack */
		push opcode="1001 001d dddd 1111" Rr {
			//stack = Rr;
			PC = PC + 1;

			/* TODO ADD to stack */
			/* STACK ? Rr */
		}

		/* Pop Register from Stack */
		/* FIXME: implement me
		pop opcode="1001 000d dddd 1111" Rd {
			Rd = stack;
		}*/

		/* Return from Subroutine */
		ret opcode="1001 0101 0000 1000" {
			/* TODO zie datasheet */
			PC = PC + 1;
		}

		/* Relative Call to Subroutine */
		rcall opcode="1101 kkkk kkkk kkkk" k {
			/* TODO, this is about a 'WORD' and not a single byte */
			PC = PC + k + 1;
		}

		/* Relative Jump */
		rjmp opcode="1100 kkkk kkkk kkkk" k {
			PC = PC + k + 1;
		}

		/* Rotate Right through Carry */
		ror opcode="1001 010d dddd 0111" Rd {
			/* TODO: zie datasheet */
			C = Rd(0);
		}

		/* Subtract Immediate from Word */
		sbiw opcode="1001 0111 KKdd KKKK" Rd, K {
			/* Rd+1:Rd ? Rd+1:Rd - K; */
			/* TODO same as adiw */
			S = N ^ V;
			PC = PC + 1;
			V = Rd(h)(7) & !R15;
			N = R15;
			Z = !R15 & !R14 & !R13 & !R12 & !R11 & !R10 & !R9 & !R8 & !R7 & !R6 & !R5 & !R4 & !R3 & !R2 & !R1 & !R0;
			C = R15 & !Rd(h)(7);
			/* R (Result) equals Rdh:Rdl after the operation (Rdh7-Rdh0 = R15-R8, Rdl7-Rdl0=R7-R0). */
		}

		/* Skip if Bit in Register is Set */
		sbrs opcode="1111 111r rrrr 0bbb" Rr, b {
			/* If Rr(b) = 1 then PC ? PC + 2 (or 3) else PC ? PC + 1 */
			if Rr(b) == 1 {
				PC = PC + 2;
			} else {
				PC = PC + 1;
			}
		}

		/* Store Indirect From Register to Data Space using Index X+ */
		stxplus opcode="1001 001r rrrr 1101" X, Rr {
			// X,Y,Z: Indirect Address Register (X=R27:R26, Y=R29:R28 and Z=R31:R30)			
			// TODO Store Rr to Dataspace[X] 
			//RAM(RX) = Rr;				
			RX = RX + 1;		
			PC = PC + 1;
		}

		
		/* Store Indirect From Register to Data Space using Index X+ */
		stdyplus opcode="1000 001r rrrr 1000" Y, Rr {
			// X,Y,Z: Indirect Address Register (X=R27:R26, Y=R29:R28 and Z=R31:R30)			
			// TODO Store Rr to Dataspace[RY] 
			//RAM(RY) = Rr;			
			RY = RY + 1;		
			PC = PC + 1;
		}

	}
}

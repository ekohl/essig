parser grammar TParser;

options {

    // Default language but name it anyway
    //
    language  = Java;

    // Produce an AST
    //
    output    = AST;

    // Use a superclass to implement all helper
    // methods, instance variables and overrides
    // of ANTLR default methods, such as error
    // handling.
    //
    superClass = AbstractTParser;

    // Use the vocabulary generated by the accompanying
    // lexer.
    //
    tokenVocab = TLexer;
}

// Some imaginary tokens for tree rewrites
//
//tokens {
//}

// What package should the generated source exist in?
//
@header {

    package nl.utwente.cs.essig;
}

// Parser
//
microcontroller:	IDENTIFIER^ LBRACK! parameters registers? instructions? RBRACK! EOF!;

parameters:		PARAMETERS^ LBRACK! (parameter LINE_SEPERATOR!)+ RBRACK!;
parameter:		RAM NUMBER
	|		GPRS NUMBER
	;

registers:		REGISTERS^ LBRACK! (register LINE_SEPERATOR!)+ RBRACK!;
register:		IDENTIFIER;

instructions:		instruction+;
instruction:		IDENTIFIER^ arguments? LBRACK! expr+ RBRACK!;
arguments:		IDENTIFIER (ARG_SEPERATOR! IDENTIFIER)*;

expr:			assignExpr LINE_SEPERATOR!;
assignExpr:		IDENTIFIER ASSIGN (NOT? IDENTIFIER | NUMBER) (operator (NOT? IDENTIFIER | NUMBER ))*;

operator:		AND | OR | XOR | ADD;

parser grammar TParser;

options {

    // Default language but name it anyway
    //
    language  = Java;

    // Produce an AST
    //
    output    = AST;

    // Use a superclass to implement all helper
    // methods, instance variables and overrides
    // of ANTLR default methods, such as error
    // handling.
    //
    superClass = AbstractTParser;

    // Use the vocabulary generated by the accompanying
    // lexer.
    //
    tokenVocab = TLexer;
}

// Some imaginary tokens for tree rewrites
//
tokens {
	PARAMS;
	ARGUMENTS;
	EXPR;
}

// What package should the generated source exist in?
//
@header {
    package nl.utwente.cs.essig;
}

@members {
    private int gprs;
}

// Parser
//
microcontroller:	IDENTIFIER^ LBRACK! parameters registers instructions RBRACK! EOF!;

parameters:		PARAMETERS LBRACK (parameter LINE_SEPERATOR)+ RBRACK
		-> ^(PARAMETERS parameter+);
parameter:		RAM^ NUMBER
	|		GPRS^ NUMBER { gprs = Integer.parseInt($NUMBER.text); }
	|		SIZE^ NUMBER
	|		CLOCK^ NUMBER
	;

registers:		REGISTERS^ LBRACK! (register LINE_SEPERATOR!)+ RBRACK! {
			// Hack in the general purpose registers
			for(int i=0; i < gprs; i++) {
				adaptor.addChild($REGISTERS.tree, adaptor.create(IDENTIFIER, "R" + Integer.toString(i)));
			}
	}
	;
register:		IDENTIFIER;

instructions:		INSTRUCTIONS^ LBRACK! instruction+ RBRACK!;
instruction:		IDENTIFIER OP_CODE ASSIGN OPCODE (ARG_SEPERATOR OP_CODE ASSIGN OPCODE)? params? arguments? LBRACK expr+ RBRACK
		-> ^(IDENTIFIER OPCODE OPCODE? ^(PARAMS params?) ^(ARGUMENTS arguments?) ^(EXPR expr+));

params	:		LBRACE param (ARG_SEPERATOR param)* RBRACE
		-> param+
	;

param	:		SIZE^ ASSIGN! NUMBER
	|		CLOCK^ ASSIGN! NUMBER
	;

arguments:		argument (ARG_SEPERATOR argument)*
		-> argument+;

argument :		(SIGNED)? IDENTIFIER;

expr	:		assignExpr LINE_SEPERATOR!
	|		ifExpr
	|		HALT LINE_SEPERATOR!
	;

assignExpr:		(IDENTIFIER | (RAM LPAREN! operatorExpr RPAREN!)) ASSIGN^ operatorExpr;

ifExpr:			IF^ condition LBRACK! expr+ RBRACK! (ELSE LBRACK! expr+ RBRACK!)?;

operatorExpr:		word (operator^ operatorExpr)?;

condition:		word EQUALS^ word
	|		LPAREN! operatorExpr RPAREN! EQUALS^ word
	;

word	:		NOT? CONSTANT? IDENTIFIER^
				(LPAREN! (IDENTIFIER|NUMBER) RPAREN!)?
	|		NUMBER
	|		RAM^ LPAREN! operatorExpr RPAREN!
	
	;

operator:		AND | OR | XOR | ADD | MINUS | MULT;

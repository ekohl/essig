group c;

microcontroller(name,parameters,registers,instructions) ::= <<
#include \<stdio.h\>
#include "simulator.h"

// Spec for <name>

// Parameters
<parameters; separator="\n">
// End of parameters

// FIXME: Hardcoded parameters
int npins = 0;
size_t pinoffset = 0;
int nbits_cpu = 16;
bool is_big_endian = false;

// Registers
int nregisters = <length(registers)>;
Register registers[] = {
	<registers:{\{ "<it.name>", <it.name> \}}; separator=",\n">

 };
// End of registers

// helper functions (should be in VM I Think)
bool GetBit(int b, int pos)
{
	return ((b & (1 \<\< pos)) != 0);
}

void AddBit(long long *val, int source, int pos)
{
	*val \<\<=1;
	*val |= GetBit(source,pos);
} 

// Instructions
<instructions; separator="\n">

OpcodeHandler opcode_handlers[] = {
	<instructions:opcodehandler(); separator=",\n">,
	{0}
};
// End of instructions
>>

opcodehandler(it) ::= <<
{ "<it.name>", 0b<first(it.opcodes).opcode>, 0b<first(it.opcodes).mask>, (opcode_handler *) <it.name>, <length(it.opcodes)>-1 }
>>

register(name) ::= <<
"<name>"
>>

ram (ram) ::= <<
size_t ramsize = <ram>;
>>

instruction(name,opcodes,clock,arguments,expressions) ::= <<
bool <name> (VMState * state, VMStateDiff *diff, OPCODE_TYPE opcode) {
	printf("%-10s at 0x%02x (0x%02x) SP:0x%02x RY:0x%02x\n","<name>",GETPC(state),GETPC(state)*2,((vm_info(state,VM_INFO_RAM,SP + 1 ,0) \<\<8) + vm_info(state,VM_INFO_RAM,SP,0)),((vm_info(state,VM_INFO_REGISTER,29 ,0) \<\<8) + vm_info(state,VM_INFO_RAM,28,0)));	
	// error
	bool error = false;

	// result
	int result = 0;

	// Status Register Value
	int SREG_val = vm_info(state,VM_INFO_IO,SREG,&error);

	<if(clock)>
	// Clock cycles
	state->cycles += <clock>;
	<endif>

	// Declare arguments
	<arguments:{long long <it.name> = 0; int <it.name>_bits = 0;}; separator="\n">

	// Decode the opcode
	<opcodes; separator="\n opcode = (int)get_opcode(state, GETPC(state) + 1)->instruction;\n">

	// Cast signed arguments
	<arguments; separator="\n">

	// Execute expressions
	<first(expressions):resultExpr()>
	<rest(expressions); separator="\n">

	if (!vm_write(state,diff,VM_INFO_IO,SREG,SREG_val))
		return false;

	return true;
}
>>

opcode(mask, opcode, parsed) ::= <<
<parsed>
>>

argument(name, signed) ::= <<
<if(signed)> <name> = (int) vm_convert_to_signed(<name>,<name>_bits); <endif>
>>

resultExpr(expression) ::= <<
int R = 0;
<expression>
R = result;
>>

ifExpr(condition,ifExpr,elseExpr) ::= <<
if (<condition>) {
	<ifExpr; separator="\n">
}
<if(elseExpr)>
else {
	<elseExpr; separator="\n">
}
<endif>
>>

operatorExpr(word,operator,expression) ::= <<
<word> <operator> <expression> 
>>


assignExpr(var,type,value,comment,is_result,is_pc,isStatusBit) ::= <<
<if(is_pc)>
// Update the program counter
SETPC(state,<value>);
<else>
// <comment>
// Calculate expressions for the result var
result = <value>;
// Check if there was an error in the calculation of the result
if (error)
	return false;

<if(!is_result)>
<if(isStatusBit)>
// Set statusbit <var> in SREG
SREG_val = SETBIT(SREG_val,<var>,result);
<else>
if(!vm_write(state, diff, VM_INFO_<type>, <var>, result))
	return false;
<endif>
<endif>
<endif>
>>

assignConstant(var,value,comment) ::= <<
<if (comment)>// <var> = <comment><endif>
<var> = <value>;
>>

multiRegisterAssignExpr(type,low,high,value) ::= <<
//======MULTI WORD BEGIN
// Low Byte
vm_write(state,diff,VM_INFO_<type>,<low>,(((<value>) & 0xFF00)\>\>8));
if(error)
	return false;
// High Byte
vm_write(state,diff,VM_INFO_<type>,<high>,((<value>) & 0xFF));
if(error)
	return false;
//======MULTI WORD END
>>

condition(left,comparison,right) ::= <<
<left> <comparison> <right>
>>

wordVariable(variable, type, is_pc,isStatusBit) ::= <<
<if(is_pc)> 
GETPC(state)
<elseif(isStatusBit)>
GETBIT(SREG_val,<variable>)
<else>
vm_info(state,VM_INFO_<type>,<variable>,&error)
<endif>
>>

halt() ::= <<
	state->stopped_running = true;
        return false;
>>

multiRegister(r1,r2,type) ::= <<
((vm_info(state,VM_INFO_<type>,<r1>,&error) \<\<8) + vm_info(state,VM_INFO_<type>,<r2>,&error))
>>

not(value) ::= <<
(!(<value>))
>>

bit(var, bit) ::= <<
GetBit(<var>, <bit>)
>>

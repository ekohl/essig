group c;

microcontroller(name,parameters,registers,instructions) ::= <<
#include \<stdio.h\>
#include "simulator.h"

// Spec for <name>

// Parameters
<parameters; separator="\n">
// End of parameters

// Registers
int nregisters = <length(registers)>;
Register registers[] = {
	<registers:register(); separator=",\n">
 };
// End of registers

// helper functions (should be in VM I Think)
bool GetBit(int b, int pos)
{
	return ((b & (char)(1 \<\< pos)) != 0);
}

void AddBit(int *val, int source, int pos)
{
	*val \<\<=1;
	*val |= GetBit(source,pos);
} 

// Instructions
<instructions; separator="\n">

int n_opcode_handlers = <length(instructions)>;
OpcodeHandler opcode_handlers[] = {
	<instructions:opcodehandler(); separator=",\n">
};
// End of instructions
>>

register() ::= <<
{ "<it.name>", <it.name> }
>>


gprs (registers) ::= <<
//int nregisters = <registers>;
>>

ram (ram) ::= <<
size_t ramsize = <ram>;
>>

clock (clock) ::= <<
// Standard value for Clock Cycles for 1 instruction.
int standard_clock = <clock>;
>>

instruction_return_size (size) ::= <<
// Standard size (words) of 1 instruction return value;
int instruction_return_size = <size>;
>>

assignExpr(var,value,comment) ::= <<
// <comment>
// Calculate expressions for the result var
result = <value>;
// Check if there was an error in the calculation of the result
if (error)
	return false;

if(!vm_write(state, diff, VM_INFO_REGISTER, <var>, result))
	return false;


>>

condition(left,right) ::= <<
<left> == <right>
>>


instruction(name,params,arguments,expressions) ::= <<
bool <name> (VMState * state, VMStateDiff *diff, OPCODE_TYPE opcode) {

	// error
	bool error = false;

	// result
	int result = 0;

	//Arguments <arguments; separator=",">
	<params; separator="\n">

	// Decode the opcode
	<opcodeparsed>

	// Execute expressions
	<expressions; separator="\n">

	//Update instruction pointer
	state->pc += 1;

	return true;
}
>>

opcodehandler() ::= <<
{ "<it.name>", 0b<it.opcode>, 0b<it.mask>, (opcode_handler *) <it.name> }
>>

parameter(key,value) ::= <<
//set("<key>", <value>);
>>

param(name,value) ::=  <<
<name> = <value>;

>>

register(name) ::= <<
"<name>"
>>

ifExpr(conditio,ifExpr,elseExpr) ::= <<
if (<condition>) {
	<ifExpr; separator="\n">
}
<if(elseExpr)>
else {
	<elseExpr; separator="\n">
}
<endif>
>>

operatorExpr(word,operator,expression) ::= <<
<word> <operator> <expression> 
>>

wordRegister(register, bit, type, not) ::= <<
<not> <if(bit)>
GetBit(vm_info(state,VM_INFO_<type>,<register>,&error), <bit>)
<else>
vm_info(state,VM_INFO_<type>,<register>,&error)
<endif>
>>
